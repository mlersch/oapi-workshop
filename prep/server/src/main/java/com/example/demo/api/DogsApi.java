/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.example.demo.api;

import com.example.demo.model.Dog;
import com.example.demo.model.GeneralError;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@Validated
@Api(value = "dogs", description = "the dogs API")
public interface DogsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "dogsDogIdDelete", notes = "Delete a dog with the given `dogId`", response = Dog.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The saved dog", response = Dog.class),
        @ApiResponse(code = 404, message = "Entity not found."),
        @ApiResponse(code = 200, message = "General Error", response = GeneralError.class) })
    @RequestMapping(value = "/dogs/{dogId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Dog> dogsDogIdDelete(@Size(min=3,max=10) @ApiParam(value = "The dogs unique ID",required=true) @PathVariable("dogId") String dogId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : \"abc\",  \"name\" : \"foobar\",  \"age\" : 5,  \"country\" : \"DE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "dogsDogIdGet", notes = "Get a dog with the given `dogId`", response = Dog.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "The saved dog", response = Dog.class),
        @ApiResponse(code = 404, message = "Entity not found."),
        @ApiResponse(code = 200, message = "General Error", response = GeneralError.class) })
    @RequestMapping(value = "/dogs/{dogId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Dog> dogsDogIdGet(@Size(min=3,max=10) @ApiParam(value = "The dogs unique ID",required=true) @PathVariable("dogId") String dogId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : \"abc\",  \"name\" : \"foobar\",  \"age\" : 5,  \"country\" : \"DE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "dogsDogIdPut", notes = "Update the dogs information.", response = Dog.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The saved dog", response = Dog.class),
        @ApiResponse(code = 400, message = "Illegal input for operation."),
        @ApiResponse(code = 200, message = "General Error", response = GeneralError.class) })
    @RequestMapping(value = "/dogs/{dogId}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    default ResponseEntity<Dog> dogsDogIdPut(@Size(min=3,max=10) @ApiParam(value = "The dogs unique ID",required=true) @PathVariable("dogId") String dogId,@ApiParam(value = "the new dog informations you want to save." ,required=true )  @Valid @RequestBody Dog dog) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : \"abc\",  \"name\" : \"foobar\",  \"age\" : 5,  \"country\" : \"DE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "dogsGet", notes = "Get a List of all dogs that are registered.", response = Dog.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Resultset with all the dogs", response = Dog.class, responseContainer = "List"),
        @ApiResponse(code = 200, message = "General Error", response = GeneralError.class) })
    @RequestMapping(value = "/dogs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Dog>> dogsGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "[ {  \"id\" : \"abc\",  \"name\" : \"foobar\",  \"age\" : 5,  \"country\" : \"DE\"}, {  \"id\" : \"def\",  \"name\" : \"bob\",  \"age\" : 10,  \"country\" : \"CZ\"} ]");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "dogsPost", notes = "Register a new dog.", response = Dog.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "The saved dog", response = Dog.class),
        @ApiResponse(code = 400, message = "Illegal input for operation."),
        @ApiResponse(code = 200, message = "General Error", response = GeneralError.class) })
    @RequestMapping(value = "/dogs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Dog> dogsPost(@ApiParam(value = "the new dog informations you want to save." ,required=true )  @Valid @RequestBody Dog dog) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"id\" : \"abc\",  \"name\" : \"foobar\",  \"age\" : 5,  \"country\" : \"DE\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
