// @flow
/* eslint-disable no-use-before-define */
/**
 * demo
 * ### This is a sample server for a pet store. The content can be multiline an formated using  __markdown__ syntax for `rich text` representation. See [CommonMark Spec](https://spec.commonmark.org/0.28/) for details. 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH: string = "http://localhost:8181".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 */
export type FetchAPI = {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 */
export type FetchArgs = {
    url: string;
    options: {};
}


/**
 *
 * @export
 */
export type RequestOptions = {
    headers?: {};
    query?: {};
    body?: string | FormData;
}

/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name:string = "RequiredError"
    constructor(field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 */
export type Dog = {
    /**
     * The dogs unique ID
     * @type {string}
     * @memberof Dog
     */
    id?: string;
    /**
     * The name of the dog
     * @type {string}
     * @memberof Dog
     */
    name: string;
    /**
     * The Age of the dog
     * @type {number}
     * @memberof Dog
     */
    age: number;
    /**
     * The [ISO 3166](https://en.wikipedia.org/wiki/ISO_3166-1) country code where the dog lives
     * @type {string}
     * @memberof Dog
     */
    country?: string;
}


/**
 * 
 * @export
 */
export type GeneralError = {
    /**
     * 
     * @type {number}
     * @memberof GeneralError
     */
    code?: number;
    /**
     * 
     * @type {string}
     * @memberof GeneralError
     */
    message?: string;
}




/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Delete a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdDelete(dogId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId','Required parameter dogId was null or undefined when calling dogsDogIdDelete.');
            }
            const localVarPath = `/dogs/{dogId}`
                .replace(`{${"dogId"}}`, encodeURIComponent(String(dogId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdGet(dogId: string, options: RequestOptions): FetchArgs {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId','Required parameter dogId was null or undefined when calling dogsDogIdGet.');
            }
            const localVarPath = `/dogs/{dogId}`
                .replace(`{${"dogId"}}`, encodeURIComponent(String(dogId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the dogs information.
         * @throws {RequiredError}
         */
        dogsDogIdPut(dogId: string, dog: Dog, options: RequestOptions): FetchArgs {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId','Required parameter dogId was null or undefined when calling dogsDogIdPut.');
            }
            // verify required parameter 'dog' is not null or undefined
            if (dog === null || dog === undefined) {
                throw new RequiredError('dog','Required parameter dog was null or undefined when calling dogsDogIdPut.');
            }
            const localVarPath = `/dogs/{dogId}`
                .replace(`{${"dogId"}}`, encodeURIComponent(String(dogId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'PUT' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof dog !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dog || {}) : (((dog:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a List of all dogs that are registered.
         * @throws {RequiredError}
         */
        dogsGet(options: RequestOptions): FetchArgs {
            const localVarPath = `/dogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'GET' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Register a new dog.
         * @throws {RequiredError}
         */
        dogsPost(dog: Dog, options: RequestOptions): FetchArgs {
            // verify required parameter 'dog' is not null or undefined
            if (dog === null || dog === undefined) {
                throw new RequiredError('dog','Required parameter dog was null or undefined when calling dogsPost.');
            }
            const localVarPath = `/dogs`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions: RequestOptions = Object.assign({}, { method: 'POST' }, options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (typeof dog !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(dog || {}) : (((dog:any):string) || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

export type DefaultApiType = { 
    dogsDogIdDelete(dogId: string, options?: RequestOptions): Promise<Dog>,

    dogsDogIdGet(dogId: string, options?: RequestOptions): Promise<Dog>,

    dogsDogIdPut(dogId: string, dog: Dog, options?: RequestOptions): Promise<Dog>,

    dogsGet(options?: RequestOptions): Promise<Array<Dog>>,

    dogsPost(dog: Dog, options?: RequestOptions): Promise<Dog>,
}

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export const DefaultApi = function(configuration?: Configuration, fetch: FetchAPI = portableFetch): DefaultApiType {
    const basePath: string = (configuration && configuration.basePath) || BASE_PATH;
    return {
        /**
         * Delete a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdDelete(dogId: string, options?: RequestOptions = {}): Promise<Dog> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsDogIdDelete(dogId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdGet(dogId: string, options?: RequestOptions = {}): Promise<Dog> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsDogIdGet(dogId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Update the dogs information.
         * @throws {RequiredError}
         */
        dogsDogIdPut(dogId: string, dog: Dog, options?: RequestOptions = {}): Promise<Dog> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsDogIdPut(dogId, dog, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Get a List of all dogs that are registered.
         * @throws {RequiredError}
         */
        dogsGet(options?: RequestOptions = {}): Promise<Array<Dog>> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
        /**
         * Register a new dog.
         * @throws {RequiredError}
         */
        dogsPost(dog: Dog, options?: RequestOptions = {}): Promise<Dog> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsPost(dog, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },
    }
};

export type ApiTypes = { 
    DefaultApi: DefaultApiType,
 }
