function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable no-use-before-define */
/**
 * demo
 * ### This is a sample server for a pet store. The content can be multiline an formated using  __markdown__ syntax for `rich text` representation. See [CommonMark Spec](https://spec.commonmark.org/0.28/) for details. 
 *
 * OpenAPI spec version: 0.0.1
 * Contact: support@example.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

var BASE_PATH = "http://localhost:8181".replace(/\/+$/, "");

/**
 *
 * @export
 */
export var COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|"
};

/**
 *
 * @export
 */


/**
 *
 * @export
 */


/**
 *
 * @export
 */


/**
 * * @export
 * @class RequiredError
 * @extends {Error}
 */
export var RequiredError = function (_Error) {
    _inherits(RequiredError, _Error);

    function RequiredError(field, msg) {
        _classCallCheck(this, RequiredError);

        var _this = _possibleConstructorReturn(this, (RequiredError.__proto__ || Object.getPrototypeOf(RequiredError)).call(this, msg));

        _this.name = "RequiredError";
        return _this;
    }

    return RequiredError;
}(Error);

/**
 * 
 * @export
 */


/**
 * 
 * @export
 */


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export var DefaultApiFetchParamCreator = function DefaultApiFetchParamCreator(configuration) {
    return {
        /**
         * Delete a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdDelete: function dogsDogIdDelete(dogId, options) {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId', 'Required parameter dogId was null or undefined when calling dogsDogIdDelete.');
            }
            var localVarPath = "/dogs/{dogId}".replace("{" + "dogId" + "}", encodeURIComponent(String(dogId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({}, { method: 'DELETE' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },

        /**
         * Get a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdGet: function dogsDogIdGet(dogId, options) {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId', 'Required parameter dogId was null or undefined when calling dogsDogIdGet.');
            }
            var localVarPath = "/dogs/{dogId}".replace("{" + "dogId" + "}", encodeURIComponent(String(dogId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({}, { method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },

        /**
         * Update the dogs information.
         * @throws {RequiredError}
         */
        dogsDogIdPut: function dogsDogIdPut(dogId, dog, options) {
            // verify required parameter 'dogId' is not null or undefined
            if (dogId === null || dogId === undefined) {
                throw new RequiredError('dogId', 'Required parameter dogId was null or undefined when calling dogsDogIdPut.');
            }
            // verify required parameter 'dog' is not null or undefined
            if (dog === null || dog === undefined) {
                throw new RequiredError('dog', 'Required parameter dog was null or undefined when calling dogsDogIdPut.');
            }
            var localVarPath = "/dogs/{dogId}".replace("{" + "dogId" + "}", encodeURIComponent(String(dogId)));
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({}, { method: 'PUT' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = typeof dog !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(dog || {}) : dog || "";

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },

        /**
         * Get a List of all dogs that are registered.
         * @throws {RequiredError}
         */
        dogsGet: function dogsGet(options) {
            var localVarPath = "/dogs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({}, { method: 'GET' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        },

        /**
         * Register a new dog.
         * @throws {RequiredError}
         */
        dogsPost: function dogsPost(dog, options) {
            // verify required parameter 'dog' is not null or undefined
            if (dog === null || dog === undefined) {
                throw new RequiredError('dog', 'Required parameter dog was null or undefined when calling dogsPost.');
            }
            var localVarPath = "/dogs";
            var localVarUrlObj = url.parse(localVarPath, true);
            var localVarRequestOptions = Object.assign({}, { method: 'POST' }, options);
            var localVarHeaderParameter = {};
            var localVarQueryParameter = {};

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            var needsSerialization = typeof dog !== "string" || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body = needsSerialization ? JSON.stringify(dog || {}) : dog || "";

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions
            };
        }
    };
};

/**
 * DefaultApi - factory function to inject configuration 
 * @export
 */
export var DefaultApi = function DefaultApi(configuration) {
    var fetch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : portableFetch;

    var basePath = configuration && configuration.basePath || BASE_PATH;
    return {
        /**
         * Delete a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdDelete: function dogsDogIdDelete(dogId) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsDogIdDelete(dogId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },

        /**
         * Get a dog with the given `dogId`
         * @throws {RequiredError}
         */
        dogsDogIdGet: function dogsDogIdGet(dogId) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsDogIdGet(dogId, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },

        /**
         * Update the dogs information.
         * @throws {RequiredError}
         */
        dogsDogIdPut: function dogsDogIdPut(dogId, dog) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

            var localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsDogIdPut(dogId, dog, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },

        /**
         * Get a List of all dogs that are registered.
         * @throws {RequiredError}
         */
        dogsGet: function dogsGet() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

            var localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsGet(options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        },

        /**
         * Register a new dog.
         * @throws {RequiredError}
         */
        dogsPost: function dogsPost(dog) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            var localVarFetchArgs = DefaultApiFetchParamCreator(configuration).dogsPost(dog, options);
            return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then(function (response) {
                if (response.status >= 200 && response.status < 300) {
                    return response.json();
                } else {
                    throw response;
                }
            });
        }
    };
};